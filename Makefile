.PHONY: clean-pycache clean-ruff-cache clean-mypy-cache clean-pytest-cache \
		clean-coverage clean-all \
        lint format mypy pretty all dev prod \
		docker_build docker_run docker_logs docker_stop \
		generate_dependencies \
		release-patch release-minor release-major \
		generate-changelog tag-current push-tags check-clean version-info

-include .env
DOCKER_IMAGE_NAME := text-to-sql-agent
DOCKER_IMAGE_TAG := latest
DOCKER_IMAGE := $(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)
DOCKER_CONTAINER_NAME := $(DOCKER_IMAGE_NAME)

# ------------------------------------------------------------------------------
# Cleaning Targets
# ------------------------------------------------------------------------------
# These targets remove various cache directories generated by Python tools.
clean-pycache:
	find ./ -type d -name '__pycache__' -exec rm -rf {} +

clean-ruff-cache:
	find ./ -type d -name '.ruff_cache' -exec rm -rf {} +

clean-mypy-cache:
	find ./ -type d -name '.mypy_cache' -exec rm -rf {} +

clean-pytest-cache:
	find ./ -type d -name '.pytest_cache' -exec rm -rf {} +

clean-coverage:
	find ./ -name '.coverage*' -delete

# Removes all caches (pycache, ruff_cache, mypy_cache, pytest_cache, and coverage files).
clean-all: clean-pycache clean-ruff-cache clean-mypy-cache clean-pytest-cache clean-coverage

# ------------------------------------------------------------------------------
# Code Quality and Formatting Targets
# ------------------------------------------------------------------------------
# Lint the code and automatically fix issues where possible.
lint:
	uv run ruff check src/* --fix
	uv run ruff check server.py --fix

# Format the code using Ruff's built-in formatting capabilities.
format:
	uv run ruff format src/*
	uv run ruff format server.py

# Perform static type checking with mypy.
mypy:
	uv run mypy src server.py

# Run all code quality improvements: linting, formatting, and sorting imports.
pretty: lint format

# ------------------------------------------------------------------------------
# Meta Targets
# ------------------------------------------------------------------------------
# Run all code quality checks (lint, format, imports), static type checks,
# and then clean up caches.
all: pretty mypy clean-all

# ------------------------------------------------------------------------------
# Run Targets
# ------------------------------------------------------------------------------
# Run the server in development mode with hot-reloading.
dev:
	uv run uvicorn server:app \
		--host 0.0.0.0 \
		--port 8000 \
		--reload

# Run the server in production mode without reloading.
prod:
	uv run uvicorn server:app \
		--host 0.0.0.0 \
		--port 8000

# ------------------------------------------------------------------------------
# Docker
# ------------------------------------------------------------------------------

docker_build:
	docker build -t $(DOCKER_IMAGE) .

docker_run:
	docker run --rm --name $(DOCKER_CONTAINER_NAME) \
	  --env-file .env \
	  -p 8000:8000 -d $(DOCKER_IMAGE)

docker_logs:
	docker logs -f --tail=100 $(DOCKER_CONTAINER_NAME)

docker_stop:
	docker stop $(DOCKER_CONTAINER_NAME)

docker_shell:
	docker exec -it $(DOCKER_CONTAINER_NAME) /bin/bash

# ------------------------------------------------------------------------------
# MCP Server (FastMCP 2.0)
# ------------------------------------------------------------------------------

# Run the MCP server in STDIO mode (default, for MCP client integration)
mcp:
	uv run python mcp_server.py

# Run MCP server in HTTP mode with web interface (now fully supported!)
mcp-http:
	uv run python mcp_server.py --http

# Run MCP server in HTTP mode on custom port
mcp-http-port:
	uv run python mcp_server.py --http --port 8080

# Run MCP server in HTTP mode accessible from any IP
mcp-http-public:
	uv run python mcp_server.py --http --host 0.0.0.0 --port 3000

# Show MCP server usage help
mcp-help:
	uv run python mcp_server.py --help

# Test MCP server with the official MCP Inspector
mcp-inspect:
	npx @modelcontextprotocol/inspector ./run_mcp_server.sh

# Test MCP server in CLI mode
mcp-inspect-cli:
	npx @modelcontextprotocol/inspector --cli --transport stdio --method tools/list ./run_mcp_server.sh

# Test MCP server tools listing
mcp-list-tools:
	@echo "Testing MCP server tools..."
	@timeout 10s ./run_mcp_server.sh &
	@sleep 2
	@echo "Server started. Use MCP Inspector to connect."

# ------------------------------------------------------------------------------
# FastMCP CLI Commands
# ------------------------------------------------------------------------------

# Run MCP server using FastMCP CLI (STDIO mode)
mcp-cli-stdio:
	uv run fastmcp run mcp_server.py:mcp --transport stdio

# Run MCP server using FastMCP CLI (HTTP mode)  
mcp-cli-http:
	uv run fastmcp run mcp_server.py:mcp --transport http --port 8080

# Show FastMCP version
mcp-version:
	uv run fastmcp version

# ------------------------------------------------------------------------------
# Python dependencies
# ------------------------------------------------------------------------------

generate_dependencies:
	uv export --format requirements-txt --only-group dev --no-hashes > requirements-dev.txt
	uv export --format requirements-txt --no-group dev --no-hashes > requirements.txt

# ------------------------------------------------------------------------------
# Release Management
# ------------------------------------------------------------------------------

# Check if working directory is clean
check-clean:
	@if ! git diff --quiet || ! git diff --staged --quiet; then \
		echo "❌ Working directory is not clean. Please commit or stash changes."; \
		git status --porcelain; \
		exit 1; \
	fi
	@echo "✅ Working directory is clean"

# Generate changelog from git commits
generate-changelog:
	@echo "🔄 Generating changelog..."
	@./scripts/generate_changelog.sh
	@echo "✅ Changelog generated successfully"

# Create and push git tag for current version
tag-current:
	@VERSION=$(uv version --short); \
	echo "🏷️  Creating tag v$VERSION..."; \
	git tag -a "v$VERSION" -m "Release v$VERSION"; \
	echo "✅ Tag v$VERSION created"

# Push all tags to remote
push-tags:
	@echo "📤 Pushing tags to remote..."
	@git push origin --tags
	@echo "✅ Tags pushed successfully"

# Release workflow: patch version bump
release-patch: check-clean all
	@echo "🚀 Starting patch release..."
	@OLD_VERSION=$(uv version --short); \
	uv version --bump patch; \
	NEW_VERSION=$(uv version --short); \
	echo "📈 Version bumped: $OLD_VERSION → $NEW_VERSION"
	@$(MAKE) generate-changelog
	@git add pyproject.toml CHANGELOG.md uv.lock
	@NEW_VERSION=$(uv version --short); \
	git commit -m "chore: release v$NEW_VERSION"
	@$(MAKE) tag-current
	@$(MAKE) push-tags
	@echo "🎉 Patch release v$(uv version --short) completed!"

# Release workflow: minor version bump  
release-minor: check-clean all
	@echo "🚀 Starting minor release..."
	@OLD_VERSION=$(uv version --short); \
	uv version --bump minor; \
	NEW_VERSION=$(uv version --short); \
	echo "📈 Version bumped: $OLD_VERSION → $NEW_VERSION"
	@$(MAKE) generate-changelog
	@git add pyproject.toml CHANGELOG.md uv.lock
	@NEW_VERSION=$(uv version --short); \
	git commit -m "chore: release v$NEW_VERSION"
	@$(MAKE) tag-current
	@$(MAKE) push-tags
	@echo "🎉 Minor release v$(uv version --short) completed!"

# Release workflow: major version bump
release-major: check-clean all  
	@echo "🚀 Starting major release..."
	@OLD_VERSION=$(uv version --short); \
	uv version --bump major; \
	NEW_VERSION=$(uv version --short); \
	echo "📈 Version bumped: $OLD_VERSION → $NEW_VERSION"
	@$(MAKE) generate-changelog
	@git add pyproject.toml CHANGELOG.md uv.lock
	@NEW_VERSION=$(uv version --short); \
	git commit -m "chore: release v$NEW_VERSION"
	@$(MAKE) tag-current
	@$(MAKE) push-tags
	@echo "🎉 Major release v$(uv version --short) completed!"

# Show current version and release status
version-info:
	@UV_NO_COLOR=1 uv version --short | sed 's/\x1b\[[0-9;]*m//g' | xargs -I {} echo "📊 Current version: {}"
	@git describe --tags --abbrev=0 2>/dev/null | xargs -I {} echo "🏷️  Latest tag: {}" || echo "🏷️  Latest tag: none"
	@git rev-list --count HEAD | xargs -I {} echo "📝 Total commits: {}"