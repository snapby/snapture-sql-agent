.PHONY: clean-pycache clean-ruff-cache clean-mypy-cache clean-pytest-cache \
		clean-coverage clean-all \
        lint format mypy pretty all dev prod \
		docker_build docker_run docker_logs docker_stop \
		generate_dependencies

include .env
DOCKER_IMAGE_NAME := text-to-sql-agent
DOCKER_IMAGE_TAG := latest
DOCKER_IMAGE := $(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)
DOCKER_CONTAINER_NAME := $(DOCKER_IMAGE_NAME)

# ------------------------------------------------------------------------------
# Cleaning Targets
# ------------------------------------------------------------------------------
# These targets remove various cache directories generated by Python tools.
clean-pycache:
	find ./ -type d -name '__pycache__' -exec rm -rf {} +

clean-ruff-cache:
	find ./ -type d -name '.ruff_cache' -exec rm -rf {} +

clean-mypy-cache:
	find ./ -type d -name '.mypy_cache' -exec rm -rf {} +

clean-pytest-cache:
	find ./ -type d -name '.pytest_cache' -exec rm -rf {} +

clean-coverage:
	find ./ -name '.coverage*' -delete

# Removes all caches (pycache, ruff_cache, mypy_cache, pytest_cache, and coverage files).
clean-all: clean-pycache clean-ruff-cache clean-mypy-cache clean-pytest-cache clean-coverage

# ------------------------------------------------------------------------------
# Code Quality and Formatting Targets
# ------------------------------------------------------------------------------
# Lint the code and automatically fix issues where possible.
lint:
	uv run ruff check src/* --fix
	uv run ruff check server.py --fix

# Format the code using Ruff's built-in formatting capabilities.
format:
	uv run ruff format src/*
	uv run ruff format server.py

# Perform static type checking with mypy.
mypy:
	uv run mypy src server.py

# Run all code quality improvements: linting, formatting, and sorting imports.
pretty: lint format

# ------------------------------------------------------------------------------
# Meta Targets
# ------------------------------------------------------------------------------
# Run all code quality checks (lint, format, imports), static type checks,
# and then clean up caches.
all: pretty mypy clean-all

# ------------------------------------------------------------------------------
# Run Targets
# ------------------------------------------------------------------------------
# Run the server in development mode with hot-reloading.
dev:
	uv run uvicorn server:app \
		--host 0.0.0.0 \
		--port 8000 \
		--reload

# Run the server in production mode without reloading.
prod:
	uv run uvicorn server:app \
		--host 0.0.0.0 \
		--port 8000

# ------------------------------------------------------------------------------
# Docker
# ------------------------------------------------------------------------------

docker_build:
	docker build -t $(DOCKER_IMAGE) .

docker_run:
	docker run --rm --name $(DOCKER_CONTAINER_NAME) \
	  --env-file .env \
	  -p 8000:8000 -d $(DOCKER_IMAGE)

docker_logs:
	docker logs -f --tail=100 $(DOCKER_CONTAINER_NAME)

docker_stop:
	docker stop $(DOCKER_CONTAINER_NAME)

docker_shell:
	docker exec -it $(DOCKER_CONTAINER_NAME) /bin/bash

# ------------------------------------------------------------------------------
# Python dependencies
# ------------------------------------------------------------------------------

generate_dependencies:
	uv export --format requirements-txt --only-group dev --no-hashes > requirements-dev.txt
	uv export --format requirements-txt --no-group dev --no-hashes > requirements.txt